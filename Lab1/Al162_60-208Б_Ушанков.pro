/*								Каток
Четыре подруги пришли на каток, каждая со своим братом. Они разбились на пары и 
начали кататься. Оказалось, что в каждой паре юноша выше дамы и никто 
не катается со своей сестрой. Самый высокий из компании - Юра Воробьев, следующий
по росту Андрей Егоров, потом Люся Егорова, Сережа Петров, Оля Петрова, Дима Крымов
Инна Краымова и Аня Воробьева. Кто с кем катался?	*/

DOMAINS
  	фамилия = symbol
  	имя_девушки = symbol
  	имя_юноши = symbol

% Разделены для распознования пола, таким образом отдельная проверка пола
% не потребуется
  	структура_девушки = девушка(имя_девушки, фамилия)
  	структура_юноши = юноша(имя_юноши, фамилия)
  
  	фамилии = фамилия*
  	девушки = структура_девушки*
  	юноши = структура_юноши*

% Прикладной объект
  	человек = девушка(имя_девушки, фамилия); юноша(имя_юноши, фамилия)
  
% Структура гипотезы представляет собой возможную пару
  	структура_гипотезы = пара(структура_девушки, структура_юноши)
  	гипотеза = структура_гипотезы*
  
CONSTANTS
% Список участвующих девушек
  	все_девушки = [девушка(люся, егоровы), девушка(оля, петровы), девушка(инна, крымовы), девушка(аня, воробьевы)]
% Список участвующих юношей
  	все_юноши = [юноша(юра, воробьевы), юноша(андрей, егоровы), юноша(сережа, петровы), юноша(дима, крымовы)]
PREDICATES
  	nondeterm входит_в(структура_гипотезы, гипотеза)
  	nondeterm входит_в(фамилия, фамилии)
  	nondeterm входит_в(структура_девушки, девушки)
  	nondeterm входит_в(структура_юноши, юноши)
  
  	nondeterm без_повторов(фамилии)
  	nondeterm без_повторов(девушки)
  	nondeterm без_повторов(юноши)
  
  	nondeterm генерация_гипотезы(гипотеза)
  	nondeterm факт_ниже(человек, человек)
  	nondeterm ниже(человек, человек)
  	nondeterm есть_девушка_выше_юноша(гипотеза)
  
  	nondeterm проверка_гипотезы(гипотеза)
CLAUSES
    входит_в(Name, [Name|_]). 
    входит_в(Name, [_|Хвост]):- 
       	входит_в(Name, Хвост).
       
/*
	Идея взята отсюда и переделана под один список:
	https://studassistent.ru/prolog/obedinenie-dvuh-spiskov-bez-povtoreniy-prolog
*/	

% Это правило говорит нам о том, что в пустом списке нет повтором
    без_повторов([]).
% Это правило отделяет первый элемент и проверяет, входит ли оно в хвост.
% Если нет, то поиск продолжается рекурсивно для остальных элементов (Хвост)
% Если есть, то неудача
    без_повторов([Name|Хвост]):-
      	NOT(входит_в(Name, Хвост)),
      	без_повторов(Хвост).

% Генерация гипотезы
    	генерация_гипотезы(Гипотеза):-
      		входит_в(ПараПетровой, все_юноши), 
      		входит_в(ПараКрымовой, все_юноши), 
      		входит_в(ПараВоробьевой, все_юноши), 
      		входит_в(ПараЕгоровой, все_юноши), 
      
      	без_повторов([ПараПетровой, ПараКрымовой, ПараВоробьевой, ПараЕгоровой]),
      
% Никто не катается со своей сестрой. 
      	NOT(ПараПетровой = юноша(_, петровы)),
      	NOT(ПараКрымовой = юноша(_, крымовы)),
      	NOT(ПараВоробьевой = юноша(_, воробьевы)),
      	NOT(ПараЕгоровой = юноша(_, егоровы)),
      
      	Гипотеза = 
      	[
		% Все возможные пары для каждой девушки
        	пара(девушка(оля, петровы),  ПараПетровой),
        	пара(девушка(инна, крымовы),  ПараКрымовой),
        	пара(девушка(аня, воробьевы),  ПараВоробьевой),
        	пара(девушка(люся, егоровы),  ПараЕгоровой)
       	].
    
% Порядок по росту из условия задачи
% Преписка "факт" для того, чтобы обозначить их как факты из задачи
% и отделить от правила "ниже"
    факт_ниже(юноша(андрей, егоровы), юноша(юра, воробьевы)).
    факт_ниже(девушка(люся, егоровы), юноша(андрей, егоровы)).
    факт_ниже(юноша(сережа, петровы), девушка(люся, егоровы)).
    факт_ниже(девушка(оля, петровы), юноша(сережа, петровы)).
    факт_ниже(юноша(дима, крымовы), девушка(оля, петровы)).
    факт_ниже(девушка(инна, крымовы), юноша(дима, крымовы)).
    факт_ниже(девушка(аня, воробьевы), девушка(инна, крымовы)).
    
% Сравение по росту при помощи рекурсии
% Также это можно реализовать серией сравнений через "ИЛИ",
% но это слишком громоздко
  	ниже(Ниже, Выше):-
    	факт_ниже(Ниже, Выше);
    	факт_ниже(Середина, Выше), 
    	ниже(Ниже, Середина).
    
% Возвращает true, если в списке пар есть пара, где девушка выше юноши
  	есть_девушка_выше_юноша(Гипотеза):-
    	входит_в(пара(девушка(ИмяДевушки, ФамилияДевушки), юноша(ИмяЮноша, ФамилияЮноша)), 
      		Гипотеза), 
    	ниже(юноша(ИмяЮноша, ФамилияЮноша), девушка(ИмяДевушки, ФамилияДевушки)).
    
    
% Проверка гипотезы
 	проверка_гипотезы(Гипотеза):-
   		NOT(есть_девушка_выше_юноша(Гипотеза)).
GOAL
  	генерация_гипотезы(Гипотеза),
  	проверка_гипотезы(Гипотеза).