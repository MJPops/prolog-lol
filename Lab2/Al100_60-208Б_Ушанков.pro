/*				Хитрый шпион
	В некоторой далекой стране рыцари всегда говорили только правду и никогда не лгали, а
лжецы всегда только лгали и никогда не говорили правды. Однажды все население страны пришло в
необычайное волнение: стало известно, что в страну проник шпион из другой страны.
	Он был арестован вместе с двумя коренными жителями, один из которых был рыцарем, а другой
лжецом. Все трое предстали перед судом. Суд знал, что один из обвиняемых рыцарь, другой лжец,
третий шпион (который иногда лжет, а иногда говорит правду), но кто есть кто, суду не было известно.
	Обозначим подсудимых латинскими буквами А, В и С.
Сначала А заявил: — Я не шпион.
После чего В сказал: — Я шпион.
Тогда подсудимого С спросили: — В действительно шпион?
	В действительности шпионом был С. Будучи шпионом, он мог по своему усмотрению либо лгать, либо
говорить правду. На суде он всячески хитрил и изворачивался, отвечая так, чтобы его невозможно было
изобличить как шпиона.
Что ответил С на вопрос судьи?									*/

DOMAINS
	тип = symbol
	имя = symbol
	ответ = да; нет
	
% "подсудимый" - объект 
  	подсудимый = подсудимый(имя, тип); с_сказал(ответ)
  
  	все_ответы = ответ*
  	гипотеза = подсудимый*
  	гипотезы = гипотеза*
PREDICATES
  	nondeterm входит_в(подсудимый, гипотеза)
  	nondeterm входит_в(гипотеза, гипотезы)
  	nondeterm входит_в(ответ, все_ответы)
  	nondeterm решение_без_повторов(все_ответы, все_ответы, все_ответы)

  	nondeterm возможный_тип(тип)
  	nondeterm возможное_имя(имя)
  	nondeterm возможный_ответ(ответ)
  	nondeterm сказал(имя, гипотеза)
  
  	nondeterm проверка_высказывания(имя, гипотеза)
  	nondeterm проверка_высказываний(гипотеза)
  
  	nondeterm генерация_гипотезы(гипотеза)
  	nondeterm проверка_гипотезы(гипотеза)
  
  	nondeterm поиск_всех_ответов(ответ)
  	nondeterm проверка_ответа_с(гипотезы, ответ)
  
  	nondeterm поиск_уникальных_решений(все_ответы)
ClAUSES
	входит_в(Name, [Name|_]). 
	входит_в(Name, [_|Хвост]) :- 
		входит_в(Name, Хвост).

% Постусловие. Если исходный список пустой, то возвращаем формирумый список как результат 
	решение_без_повторов([], Накопитель, СписокБезПовторов):-
		СписокБезПовторов = Накопитель.
% Если текущий элемент списка уже есть в формируемом списке (Накопитель) , то переходим к проверке
% остальных элементов     
	решение_без_повторов([ПервыйЭлемент|ОстальныеЭлементы], Накопитель, СписокБезПовторов):-
		входит_в(ПервыйЭлемент, Накопитель), 
		решение_без_повторов(ОстальныеЭлементы, Накопитель, СписокБезПовторов).
% Если текущий элемент списка отсутствует в формируемом списке (Накопитель), то добавляем его
% в Накопитель и переходим к проверке остальных элементов      
	решение_без_повторов([ПервыйЭлемент|ОстальныеЭлементы], Накопитель, СписокБезПовторов):-
		NOT(входит_в(ПервыйЭлемент, Накопитель)),
		решение_без_повторов(ОстальныеЭлементы, [ПервыйЭлемент|Накопитель], СписокБезПовторов).

  	возможный_тип(Тип) :-
		Тип = рыцарь;
		Тип = лжец;
		Тип = шпион.
  
  	возможное_имя(Имя) :-
		Имя = а; 
		Имя = б; 
		Имя = с.
  
  	возможный_ответ(Ответ) :-
		Ответ = да;
		Ответ = нет.

	сказал(а, Гипотеза):-
		NOT(входит_в(подсудимый(а, шпион), Гипотеза)).
	сказал(б, Гипотеза):-
		входит_в(подсудимый(б, шпион), Гипотеза).
	сказал(с, Гипотеза):-
		входит_в(с_сказал(да), Гипотеза),
		входит_в(подсудимый(б, шпион), Гипотеза);
		входит_в(с_сказал(нет), Гипотеза),
		NOT(входит_в(подсудимый(б, шпион), Гипотеза)).
    
  	проверка_высказывания(Имя, Гипотеза) :-
		входит_в(подсудимый(Имя, рыцарь), Гипотеза),
		сказал(Имя, Гипотеза);
    		
    	входит_в(подсудимый(Имя, лжец), Гипотеза), NOT(сказал(Имя, Гипотеза));
    		
    	входит_в(подсудимый(Имя, шпион), Гипотеза).
    
  	проверка_высказываний(Гипотеза):-
		проверка_высказывания(а, Гипотеза),
		проверка_высказывания(б, Гипотеза),
		проверка_высказывания(с, Гипотеза).

% Генерация гипотезы
  	генерация_гипотезы
  	([
		подсудимый(а, А), 
		подсудимый(б, Б), 
		подсудимый(с, С), 
		с_сказал(Ответ)
  	]):-
		возможный_тип(А), возможный_тип(Б), возможный_тип(С),
		NOT(А=Б), NOT(А=С), NOT(Б=С),
		возможный_ответ(Ответ).
  
% а - лжец, б - шпион, с - рыцарь, ответ - да / не подходит
  	проверка_гипотезы(Гипотеза) :-
		генерация_гипотезы(Гипотеза),
		проверка_высказываний(Гипотеза).
    
% Проверка гипотезы
  	поиск_всех_ответов(ОтветС) :-
		findall(Гипотеза, проверка_гипотезы(Гипотеза), ВсеГипотезы),
		проверка_ответа_с(ВсеГипотезы, ОтветС).
    
% С ответил так, чтобы запутать следствие, 
% т.е. чтобы при его ответе нельзя было точно установить кто есть кто
% следовательно, надо найти две разные гипотезы с одинаковым ответом С
  	проверка_ответа_с(ВсеГипотезы, ОтветС):-
    		входит_в(ГипотезаА, ВсеГипотезы),
    		входит_в(ГипотезаБ, ВсеГипотезы),
    		NOT(ГипотезаА = ГипотезаБ),

    		входит_в(с_сказал(ОтветС), ГипотезаА),
    		входит_в(с_сказал(ОтветС), ГипотезаБ).
  
  	поиск_уникальных_решений(УникальныеРешения):-
    		findall(Решение, поиск_всех_ответов(Решение), Решения),
    		решение_без_повторов(Решения, [], УникальныеРешения).
GOAL
  	поиск_уникальных_решений(С_Ответил).