/*				Хитрый шпион
	В некоторой далекой стране рыцари всегда говорили только правду и никогда не лгали, а
лжецы всегда только лгали и никогда не говорили правды. Однажды все население страны пришло в
необычайное волнение: стало известно, что в страну проник шпион из другой страны.
	Он был арестован вместе с двумя коренными жителями, один из которых был рыцарем, а другой
лжецом. Все трое предстали перед судом. Суд знал, что один из обвиняемых рыцарь, другой лжец,
третий шпион (который иногда лжет, а иногда говорит правду), но кто есть кто, суду не было известно.
	Обозначим подсудимых латинскими буквами А, В и С.
Сначала А заявил: — Я не шпион.
После чего В сказал: — Я шпион.
Тогда подсудимого С спросили: — В действительно шпион?
	В действительности шпионом был С. Будучи шпионом, он мог по своему усмотрению либо лгать, либо
говорить правду. На суде он всячески хитрил и изворачивался, отвечая так, чтобы его невозможно было
изобличить как шпиона.
Что ответил С на вопрос судьи?									*/

Domains
	тип = рыцарь; лжец; шпион
	имя = а; б; с
	ответ = да; нет
  
  	структура_гипотезы = имя_тип(имя, тип); с_сказал(ответ)
  
  	гипотеза = структура_гипотезы*
  
  	гипотезы = гипотеза*
  	решения = ответ*
predicates
  	nondeterm возможный_тип(тип)
  	nondeterm возможное_имя(имя)
  	nondeterm возможный_ответ(ответ)
  
  	nondeterm генерация_гипотезы(гипотеза)
  
  	nondeterm сказал(имя, гипотеза)
  	nondeterm проверка_высказывания(имя, гипотеза)
  	nondeterm проверка_высказываний(гипотеза)
  
  	nondeterm генерация_проверка(гипотеза)
  
  	nondeterm поиск_решения(ответ)
  	nondeterm проверка_ответ_с(гипотезы, ответ)
  
  	nondeterm входит_в(структура_гипотезы, гипотеза)
  	nondeterm входит_в(гипотеза, гипотезы)
  	nondeterm входит_в(ответ, решения)
  
  	nondeterm поиск_уникальных_решений(решения)
  	nondeterm оставить_уникальные_решения(решения, решения, решения)
clauses
  	возможный_тип(рыцарь).
  	возможный_тип(лжец).
  	возможный_тип(шпион).
  
  	возможное_имя(а).
  	возможное_имя(б).
  	возможное_имя(с).
  
  	возможный_ответ(да).
  	возможный_ответ(нет).
  
  	генерация_гипотезы
  	([
   		имя_тип(а, А), 
    		имя_тип(б, Б), 
    		имя_тип(с, С), 
    		с_сказал(Ответ)
  	]):-
    		возможный_тип(А), возможный_тип(Б), возможный_тип(С),
    		NOT(А=Б), NOT(А=С), NOT(Б=С),
    		возможный_ответ(Ответ).
  
  	сказал(а, Гипотеза):-
    		NOT(входит_в(имя_тип(а, шпион), Гипотеза)).
  	сказал(б, Гипотеза):-
    		входит_в(имя_тип(б, шпион), Гипотеза).
  	сказал(с, Гипотеза):-
    		входит_в(с_сказал(да), Гипотеза),
    		входит_в(имя_тип(б, шпион), Гипотеза);
    		входит_в(с_сказал(нет), Гипотеза),
    		NOT(входит_в(имя_тип(б, шпион), Гипотеза)).
    
  	проверка_высказывания(Имя, Гипотеза):-
    		входит_в(имя_тип(Имя, рыцарь), Гипотеза),
    		сказал(Имя, Гипотеза);
    		
    	входит_в(имя_тип(Имя, лжец), Гипотеза),
    		NOT(сказал(Имя, Гипотеза));
    		
    	входит_в(имя_тип(Имя, шпион), Гипотеза).
    
  	проверка_высказываний(Гипотеза):-
    		проверка_высказывания(а, Гипотеза),
    		проверка_высказывания(б, Гипотеза),
    		проверка_высказывания(с, Гипотеза).
  
% пример Гипотезы:
% а - лжец, б - шпион, с - рыцарь, ответ - да / не подходит
  	генерация_проверка(Гипотеза):-
    		генерация_гипотезы(Гипотеза),
    		проверка_высказываний(Гипотеза).
    
  	поиск_решения(ОтветС):-
    		findall(Гипотеза, генерация_проверка(Гипотеза), ВсеГипотезы),
    		проверка_ответ_с(ВсеГипотезы, ОтветС).
    
  	проверка_ответ_с(ВсеГипотезы, ОтветС):-
% С ответил так, чтобы запутать следствие, 
% т.е. чтобы при его ответе нельзя было точно установить кто есть кто
% следовательно, надо найти две разные гипотезы с одинаковым ответом С
    		входит_в(ГипотезаА, ВсеГипотезы),
    		входит_в(ГипотезаБ, ВсеГипотезы),
    		NOT(ГипотезаА = ГипотезаБ), % две разные гипотезы
    		входит_в(с_сказал(ОтветС), ГипотезаА),
    		входит_в(с_сказал(ОтветС), ГипотезаБ).
  
  	входит_в(Элемент, [Элемент|_ОстальныеЭлементы]).
  	входит_в(Элемент, [_ПервыйЭлемент|ОстальныеЭлементы]):-
    		входит_в(Элемент, ОстальныеЭлементы).
    
  	поиск_уникальных_решений(УникальныеРешения):-
    		findall(Решение, поиск_решения(Решение), Решения),
    		оставить_уникальные_решения(Решения, [], УникальныеРешения).
    
  	оставить_уникальные_решения([], Буфер, Множество):-
    Множество = Буфер.
  	оставить_уникальные_решения([ПервыйЭлемент|ОстальныеЭлементы], Буфер, Множество):-
    		входит_в(ПервыйЭлемент, Буфер), 
    		оставить_уникальные_решения(ОстальныеЭлементы, Буфер, Множество).
  	оставить_уникальные_решения([ПервыйЭлемент|ОстальныеЭлементы], Буфер, Множество):-
    		NOT(входит_в(ПервыйЭлемент, Буфер)),
    		оставить_уникальные_решения(ОстальныеЭлементы, [ПервыйЭлемент|Буфер], Множество).
goal
%генерация_гипотезы(Гипотеза).
%генерация_проверка(Гипотеза).
%поиск_решения(Решение).
%findall(Решение, поиск_решения(Решение), Решения).
  	поиск_уникальных_решений(УникальныеРешения).