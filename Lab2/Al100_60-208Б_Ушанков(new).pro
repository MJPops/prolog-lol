/*				Хитрый шпион
	В некоторой далекой стране рыцари всегда говорили только правду и никогда не лгали, а
лжецы всегда только лгали и никогда не говорили правды. Однажды все население страны пришло в
необычайное волнение: стало известно, что в страну проник шпион из другой страны.
	Он был арестован вместе с двумя коренными жителями, один из которых был рыцарем, а другой
лжецом. Все трое предстали перед судом. Суд знал, что один из обвиняемых рыцарь, другой лжец,
третий шпион (который иногда лжет, а иногда говорит правду), но кто есть кто, суду не было известно.
	Обозначим подсудимых латинскими буквами А, В и С.
Сначала А заявил: — Я не шпион.
После чего В сказал: — Я шпион.
Тогда подсудимого С спросили: — В действительно шпион?
	В действительности шпионом был С. Будучи шпионом, он мог по своему усмотрению либо лгать, либо
говорить правду. На суде он всячески хитрил и изворачивался, отвечая так, чтобы его невозможно было
изобличить как шпиона.
Что ответил С на вопрос судьи?									*/

DOMAINS
    подсудимый = подсудимый(обозначение_подсудимого, тип_подсудимого);
        подсудимый_с(обозначение_подсудимого, тип_подсудимого, ответ_с)

    обозначение_подсудимого = symbol
    тип_подсудимого = symbol
    ответ_с = да; нет

    подсудимые = подсудимый*
    все_подсудимые = подсудимые*
    ответы = ответ_с*
PREDICATES
% Вспомогательные предикаты для работы со списками
    nondeterm входит_в(подсудимый, подсудимые)
    nondeterm входит_в(все_подсудимые, подсудимые)
    nondeterm входит_в(ответ_с, ответы)
    nondeterm решение_без_повторов(ответы, ответы, ответы)

% Возможные значения домэинов из задачи
    nondeterm возможное_обозначение_подсудимого(обозначение_подсудимого)
    nondeterm возможный_тип_подсудимого(тип_подсудимого)
    nondeterm возможный_ответ_с(ответ_с)

    nondeterm высказывание(обозначение_подсудимого, подсудимые)
    nondeterm проверка_высказывания(обозначение_подсудимого, подсудимые)
    nondeterm проверка_высказываний(подсудимые)

    nondeterm возможный_ответ(подсудимый)
    nondeterm проверка_ответов(подсудимый)

    nondeterm поиск_всех_ответов(ответ_с)
    nondeterm проверка_ответа_с(все_подсудимые, ответ_с)
  
    nondeterm поиск_уникальных_решений(ответы)
ClAUSES
    входит_в(Name, [Name|_]). 
	входит_в(Name, [_|Хвост]) :- входит_в(Name, Хвост).

% Перечисление возможных значений домейнов из условия задачи
    возможное_обозначение_подсудимого(Обозначение) :-
		Обозначение = а; 
		Обозначение = б; 
		Обозначение = с.
    возможный_тип_подсудимого(Тип) :-
		Тип = рыцарь;
		Тип = лжец;
		Тип = шпион.
    возможный_ответ_с(Ответ) :-
		Ответ = да;
		Ответ = нет.

% "а" сказал, что он не шпион
    высказывание(а, Подсудимые) :-
        NOT(входит_в(подсудимый(а, шпион), Подсудимые)).
% "б" сказал, что он шпион
    высказывание(б, Подсудимые) :-
        входит_в(подсудимый(б, шпион), Подсудимые).
% "с" может сказать:
    высказывание(с, Подсудимые) :-
        входит_в(подсудимый(б, шпион), Подсудимые),
        входит_в(подсудимый_с(с, шпион, да), Подсудимые);
        NOT(входит_в(подсудимый(б, шпион), Подсудимые)),
        входит_в(подсудимый_с(с, шпион, нет), Подсудимые).

    проверка_высказывания(Обозначение, Подсудимые) :-
	% Рыцарь сказал правду
		входит_в(подсудимый(Обозначение, рыцарь), Подсудимые),
		высказывание(Обозначение, Подсудимые);
    		
	% Лжец - соврал
    	входит_в(подсудимый(Обозначение, лжец), Подсудимые),
        NOT(высказывание(Обозначение, Подсудимые));
    		
    	входит_в(подсудимый(Обозначение, шпион), Подсудимые).

    проверка_высказываний(Подсудимые) :-
		проверка_высказывания(а, Подсудимые),
		проверка_высказывания(б, Подсудимые),
		проверка_высказывания(с, Подсудимые).

    возможный_ответ
  	([
		подсудимый(а, А), 
		подсудимый(б, Б), 
		подсудимый_с(с, С, Ответ)
  	]):-
		возможный_тип_подсудимого(А), возможный_тип_подсудимого(Б), возможный_тип_подсудимого(С),
		NOT(А=Б), NOT(А=С), NOT(Б=С),
		возможный_ответ_с(Ответ).

  	проверка_ответов(подсудимый) :-
		возможный_ответ_с(подсудимый),
		проверка_высказываний(подсудимый).

    проверка_ответа_с(ВсеПодсудимые, ОтветС):-
        входит_в(ГипотезаА, ВсеПодсудимые),
        входит_в(ГипотезаБ, ВсеПодсудимые),
        NOT(ГипотезаА = ГипотезаБ),

        входит_в(подсудимый_с(с, С, ОтветС), ГипотезаА),
        входит_в(подсудимый_с(с, С, ОтветС), ГипотезаБ).

    поиск_всех_ответов(ОтветС) :-
		findall(Подсудимый, проверка_ответов(Подсудимый), ВсеПодсудимые),
		проверка_ответа_с(ВсеПодсудимые, ОтветС).

    поиск_уникальных_решений(УникальныеРешения):-
        findall(Решение, поиск_всех_ответов(Решение), Решения),
        решение_без_повторов(Решения, [], УникальныеРешения).

% Постусловие. Если исходный список пустой, то возвращаем формирумый список как результат 
	решение_без_повторов([], Накопитель, СписокБезПовторов):-
		СписокБезПовторов = Накопитель.
% Если текущий элемент списка уже есть в формируемом списке (Накопитель) , то переходим к проверке
% остальных элементов     
	решение_без_повторов([ПервыйЭлемент|ОстальныеЭлементы], Накопитель, СписокБезПовторов):-
		входит_в(ПервыйЭлемент, Накопитель), 
		решение_без_повторов(ОстальныеЭлементы, Накопитель, СписокБезПовторов).
% Если текущий элемент списка отсутствует в формируемом списке (Накопитель), то добавляем его
% в Накопитель и переходим к проверке остальных элементов      
	решение_без_повторов([ПервыйЭлемент|ОстальныеЭлементы], Накопитель, СписокБезПовторов):-
		NOT(входит_в(ПервыйЭлемент, Накопитель)),
		решение_без_повторов(ОстальныеЭлементы, [ПервыйЭлемент|Накопитель], СписокБезПовторов).
GOAL
    поиск_уникальных_решений(С_Ответил).